# -*- coding: utf-8 -*-
"""Data Exploration College Major Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MjbwCRZe73WFGNAORon2FETbvbaNUwZ_

NOTE!  Much of this code is notes to demonstrate Pandas.  Some areas were Exercises and the Exercise text has been inserted above the Exercise.

There is a "Sync to Github option, and I have no idea how this will appear over there.
"""

60*5

"""Load the Table of Data and display the Top 5 Rows"""

import pandas as pd
df = pd.read_csv('salaries_by_college_major.csv')\

df.head()

"""Display Dimensions of the Table of Data"""

df.shape

"""Display Column Names"""

df.columns

"""Display Values with "Not a Number" values"""

df.isna()

"""Display the last 5 values"""

df.tail()

"""Drop the bottom row of data since it's irrelevant and store it in a new Data Set Variable"""

clean_df = df.dropna()
    clean_df.tail()

clean_df['Starting Median Salary']

"""Get the Max of a Column"""

clean_df['Starting Median Salary'].max()

"""Get the ID of the Max of a columm"""

clean_df['Starting Median Salary'].idxmax()

"""Both of the next two do the same thing in different ways, and displays data for a particular column in a row."""

clean_df['Undergraduate Major'].loc[43]

clean_df['Undergraduate Major'][43]

"""OR

Display all the data on a Row
"""

clean_df.loc[43]

"""Exercise - What college major has the highest mid-career salary? How much do graduates with this major earn? (Mid-career is defined as having 10+ years of experience). """

clean_df.loc[clean_df['Mid-Career Median Salary'].idxmax()]

"""Exercise - Which college major has the lowest starting salary and how much do graduates earn after university?"""

clean_df.loc[clean_df['Starting Median Salary'].idxmin()]

"""Exercise - Which college major has the lowest mid-career salary and how much can people expect to earn with this degree? """

clean_df.loc[clean_df['Mid-Career Median Salary'].idxmin()]

"""Two Different ways to subtracke one column from another."""

clean_df['Mid-Career 90th Percentile Salary'] - clean_df['Mid-Career 10th Percentile Salary']

clean_df['Mid-Career 90th Percentile Salary'].subtract(clean_df['Mid-Career 10th Percentile Salary'])

"""Insert the Subtraction Value as a column in the data (Called Spread)"""

spread_col = clean_df['Mid-Career 90th Percentile Salary'] - clean_df['Mid-Career 10th Percentile Salary']
    clean_df.insert(1, 'Spread', spread_col)
    clean_df.head()

"""Get the Majors with the Lowest risk (Lowest difference between 10th Percentile and 90th Percentile) and sort them to show the lowest risk."""

low_risk = clean_df.sort_values('Spread')
    low_risk[['Undergraduate Major', 'Spread']].head()

"""Exercise - Find the highest potential (Highest 90th Percentile)"""

high_potential = clean_df.sort_values('Mid-Career 90th Percentile Salary', ascending=False)
    high_potential[['Undergraduate Major', 'Mid-Career 90th Percentile Salary']].head()

"""Exercise - Find the Highest Risk (Largest Spread)"""

high_risk = clean_df.sort_values('Spread', ascending=False)
    high_risk[['Undergraduate Major', 'Spread']].head()

"""Values can be grouped by catwegories (in columns),  This Table has STEM, HASS, and Business ."""

clean_df.groupby('Group').count()

"""Exercise - Find the Mean Salary of each Group"""

clean_df.groupby('Group').mean()

"""The numbers can also be formatted to be more useful."""

pd.options.display.float_format = '{:,.2f}'.format 
    clean_df.groupby('Group').mean()

"""NOTE!  I did not write this code, it came from someone in a comment, but I am making a copy of it here as a note because well, that's how useful programming works.  Code is code, knowing how to use more code is better and best.

Fresh Data for Scraping AT https://www.payscale.com/college-salary-report/majors-that-pay-you-back/bachelors
"""

# Main dataframe to collect all data
    table_from_html = pd.read_html("https://www.payscale.com/college-salary-report/majors-that-pay-you-back/bachelors")
    df = table_from_html[0].copy()
    df.columns = ["Rank", "Major", "Type", "EarlyCareerPay", "MidCareerPay", "HighMeaning"]
     
    # Add tables from other pages to main dataframe
    for page_no in range(2, 35):
        table_from_html = pd.read_html(f"https://www.payscale.com/college-salary-report/majors-that-pay-you-back/bachelors/page/{page_no}")
        page_df = table_from_html[0].copy()
        page_df.columns = ["Rank", "Major", "Type", "EarlyCareerPay", "MidCareerPay", "HighMeaning"]
        df = df.append(page_df, ignore_index=True)
     
    # Select necessary columns only
    df = df[["Major", "EarlyCareerPay", "MidCareerPay"]]
     
    # Clean columns
    df.replace({"^Major:": "", "^Early Career Pay:\$": "", "^Mid-Career Pay:\$": "", ",": ""}, regex=True, inplace=True)
     
    # Change datatype of numeric columns
    df[["EarlyCareerPay", "MidCareerPay"]] = df[["EarlyCareerPay", "MidCareerPay"]].apply(pd.to_numeric)

df.head()

lowest_2021 = df.sort_values('MidCareerPay', ascending=True)
    lowest_2021[['Major', 'MidCareerPay']].head()

